'''
OCR Reader

This is the bad boi that does it all.
'''
# TODO: Seperate out the debugging (display) funcs into 
#       their own script - same with CharCodeMaker and FlagMaker

import math
import numpy as np
import cv2


'''
           Display Funcs

These funcs aren't used by the calls but
are useful for debugging
'''
def display_at_scale (img, scale_factor, display_text=""):
    temp_img = img.copy()

    w, h = 0, 0

    try:
        w, h = temp_img.shape
    except:
        # Color images
        w, h, _ = temp_img.shape

    temp_img = cv2.resize(temp_img,
                          (h * scale_factor, w * scale_factor),
                          interpolation=cv2.INTER_NEAREST)

    if display_text != "":
        # If this is a grayscale image, the rgb code converts to a dark gray
        cv2.putText(temp_img, display_text, (0, temp_img.shape[0]-3), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 160, 65), thickness=2)

    cv2.imshow('test', temp_img)
    cv2.waitKey(0)

def display_with_bboxes (img, bboxes, color=(150, 250, 200), scale_factor=4):
    display_copy = img.copy()
    w, h = display_copy.shape
    display_copy = cv2.resize(display_copy,
                              (h * scale_factor, w * scale_factor),
                              interpolation=cv2.INTER_NEAREST)
    display_copy = cv2.cvtColor(display_copy, cv2.COLOR_GRAY2RGB)

    for bbox in bboxes:
        display_copy = cv2.rectangle(display_copy,
                                     (bbox[0] * scale_factor, bbox[2] * scale_factor), 
                                     (bbox[1] * scale_factor, bbox[3] * scale_factor),
                                     (150, 250, 200))

    display_at_scale(display_copy, 1)




'''
            Reading Characters
'''
# These constants are generated by OCRFlagMaker and OCRCharCodeMaker

# key = character width
flags_dict = {
    1: [[0,1],[0,0],[0,7],[0,3]],
    2: [[0,0]],
    3: [[1,2],[0,2]],
    4: [[1,1],[1,4],[0,2],[2,2]],
    5: [[1,1],[0,4],[3,3],[2,4],[4,4],[4,6],[0,0],[1,0],[4,0],[1,5],[3,2],[0,2]],
    6: [[4,0]]
}

char_codes = {
    1: {0: '.', 2: ',', 5: 'i', 8: ':', 10: ';', 12: '|', 13: '!'},
    2: {0: "'", 1: 'l'},
    3: {0: ']', 1: '[', 2: 'I', 3: 't'},
    4: {0: ')', 1: '}', 2: '*', 4: '<', 6: 'k', 9: '>', 10: '(', 11: '"', 12: '{', 15: 'f'},
    5: {768: '+', 3713: '6', 1026: 'c', 1027: 'r', 2693: '$', 0: '_', 7: '=', 136: 'J', 1474: 'e', 14: '/', 
        656: '3', 1681: '8', 1171: '0', 512: '-', 3991: '#', 657: '9', 154: 'S', 1179: 'G', 312: 'T', 1219: 'n', 
        1075: 'P', 1187: 'b', 1169: 'O', 1193: 'U', 1159: 'p', 1736: 'd', 45: 'V', 1201: 'D', 1203: 'B', 
        837: 'x', 824: '7', 1081: 'F', 187: '5', 3392: '&', 1217: 'u', 450: 'a', 1475: 'm', 1732: 'q', 1221: 'y',
        1222: 'g', 1121: 'L', 1480: '4', 258: 's', 3817: 'N', 2368: '1', 1233: 'Q', 1473: 'w', 1235: 'A', 
        2144: '\\', 592: '2', 1251: 'h', 2049: '^', 1154: 'o', 1041: 'C', 3816: 'X', 1769: 'K', 1259: 'H', 
        1517: 'W', 110: '%', 2344: 'Y', 839: 'z', 1267: 'R', 3305: 'M', 1157: 'v', 1145: 'E', 122: 'Z', 
        200: 'j', 784: '?'},
    6: {0: '~', 1: '@'}
}

def calc_char_code (subimg, flags):
    '''This is constructing a binary number'''
    return_val = 0
    for flag in flags:
        return_val *= 2

        # bbox gives cords for origin, flag gives offset
        x = flag[0]
        y = flag[1]
        px_val = subimg[y, x]

        if px_val > 100:
            return_val += 1
    
    return return_val

def read_bboxes (binary_img, bboxes):
    '''
    Reads the image in the order of the bboxes
    Unknown/ Unrecognized characters are replaced with ? marks 
    '''
    return_string = ""

    for bbox in bboxes: 
        # Width = key
        key = bbox[1] - bbox[0]
        img_slice = binary_img[bbox[2]:bbox[3], bbox[0]:bbox[1]]
        char_code = calc_char_code(img_slice, flags_dict[key])

        if char_code in char_codes[key].keys():
            return_string += char_codes[key][char_code]
        else:
            return_string += '?'
    
    return return_string




'''
            Reading Images
'''
def read_image (color_img):

    pass





